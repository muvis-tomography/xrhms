# Generated by Django 2.2.7 on 2019-12-18 10:24
"""
    Copyright 2023 University of Southampton
    Dr Philip Basford
    Î¼-VIS X-Ray Imaging Centre

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('muvis', '0006_auto_20191209_1743'),
        ('samples', '0042_samplemuvismapping'),
    ]

    operations = [
        migrations.CreateModel(
            name='Machine',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_index=True, max_length=50, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Server',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('host_name', models.CharField(db_index=True, help_text='The name of the server', max_length=30, unique=True)),
                ('internal_name', models.CharField(blank=True, db_index=True, help_text='The internal hostname of the server', max_length=100, null=True, unique=True)),
                ('internal_ipv4_address', models.GenericIPAddressField(blank=True, help_text='The internal IPv4 address of the server', null=True, protocol='ipv4')),
                ('internal_ipv6_address', models.GenericIPAddressField(blank=True, help_text='The internal IPv6 address of the server', null=True, protocol='ipv6')),
                ('external_name', models.CharField(blank=True, db_index=True, help_text='The external hostname of the server', max_length=100, null=True)),
                ('external_ipv4_address', models.GenericIPAddressField(blank=True, help_text='The external IPv4 address of the server', null=True, protocol='ipv4')),
                ('external_ipv6_address', models.GenericIPAddressField(blank=True, help_text='The external IPv6 address of the server', null=True, protocol='ipv6')),
            ],
        ),
        migrations.CreateModel(
            name='Share',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_index=True, help_text='The name of the share', max_length=30, unique=True)),
                ('linux_mnt_point', models.CharField(blank=True, help_text='The path to access the share when mounted under linux', max_length=100, null=True, unique=True)),
                ('windows_mnt_point', models.CharField(blank=True, help_text='The path to access the share when mounted under windows', max_length=100, null=True, unique=True)),
                ('server', models.ForeignKey(help_text='The server the share is stored on', on_delete=django.db.models.deletion.PROTECT, to='scans.Server')),
            ],
        ),
        migrations.CreateModel(
            name='NikonCTScan',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('scan_date', models.DateField(db_index=True)),
                ('inserted', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('operator', models.CharField(blank=True, max_length=30, null=True)),
                ('name', models.CharField(blank=True, db_index=True, max_length=255, null=True)),
                ('operator_id', models.CharField(blank=True, db_index=True, max_length=255, null=True)),
                ('input_seperator', models.CharField(blank=True, max_length=30, null=True)),
                ('output_seperator', models.CharField(blank=True, max_length=30, null=True)),
                ('output_folder_name', models.CharField(blank=True, db_index=True, max_length=255, null=True)),
                ('voxels_x', models.IntegerField(blank=True, null=True)),
                ('voxels_size_x', models.FloatField(blank=True, null=True)),
                ('offset_x', models.FloatField(blank=True, null=True)),
                ('voxels_y', models.IntegerField(blank=True, null=True)),
                ('voxels_size_y', models.FloatField(blank=True, null=True)),
                ('offset_y', models.FloatField(blank=True, null=True)),
                ('voxels_z', models.IntegerField(blank=True, null=True)),
                ('voxels_size_z', models.FloatField(blank=True, null=True)),
                ('offset_z', models.FloatField(blank=True, null=True)),
                ('src_to_object', models.FloatField(blank=True, null=True)),
                ('src_to_detector', models.FloatField(blank=True, null=True)),
                ('mask_radius', models.FloatField(blank=True, null=True)),
                ('detector_pixels_x', models.IntegerField(blank=True, null=True)),
                ('detector_pixel_size_x', models.FloatField(blank=True, null=True)),
                ('detector_offset_x', models.FloatField(blank=True, null=True)),
                ('detector_pixels_y', models.IntegerField(blank=True, null=True)),
                ('detector_pixel_size_y', models.FloatField(blank=True, null=True)),
                ('detector_offset_y', models.FloatField(blank=True, null=True)),
                ('detector_pixels_z', models.IntegerField(blank=True, null=True)),
                ('detector_pixel_size_z', models.FloatField(blank=True, null=True)),
                ('detector_offset_z', models.FloatField(blank=True, null=True)),
                ('region_start_x', models.IntegerField(blank=True, null=True)),
                ('region_pixels_x', models.IntegerField(blank=True, null=True)),
                ('region_start_y', models.IntegerField(blank=True, null=True)),
                ('region_pixels_y', models.IntegerField(blank=True, null=True)),
                ('units', models.CharField(blank=True, max_length=15, null=True)),
                ('scaling', models.FloatField(blank=True, null=True)),
                ('output_units', models.CharField(blank=True, max_length=15, null=True)),
                ('output_type', models.IntegerField(blank=True, null=True)),
                ('import_conversion', models.IntegerField(blank=True, null=True)),
                ('auto_scaling_type', models.IntegerField(blank=True, null=True)),
                ('scaling_minimum', models.FloatField(blank=True, null=True)),
                ('scaling_maximum', models.FloatField(blank=True, null=True)),
                ('low_percentile', models.FloatField(blank=True, null=True)),
                ('high_percentile', models.FloatField(blank=True, null=True)),
                ('projections', models.IntegerField(blank=True, null=True)),
                ('initial_angle', models.FloatField(blank=True, null=True)),
                ('angular_step', models.FloatField(blank=True, null=True)),
                ('centre_of_rotation_top', models.FloatField(blank=True, null=True)),
                ('centre_of_rotation_bottom', models.FloatField(blank=True, null=True)),
                ('white_level', models.IntegerField(blank=True, null=True)),
                ('interpolation_type', models.IntegerField(blank=True, null=True)),
                ('beam_hardening_lut_file', models.CharField(blank=True, max_length=255, null=True)),
                ('coef_x4', models.FloatField(blank=True, null=True)),
                ('coef_x3', models.FloatField(blank=True, null=True)),
                ('coef_x2', models.FloatField(blank=True, null=True)),
                ('coef_x1', models.FloatField(blank=True, null=True)),
                ('coef_x0', models.FloatField(blank=True, null=True)),
                ('scale', models.FloatField(blank=True, null=True)),
                ('filter_type', models.IntegerField(blank=True, null=True)),
                ('cutoff_frequency', models.FloatField(blank=True, null=True)),
                ('exponent', models.FloatField(blank=True, null=True)),
                ('normalisation', models.FloatField(blank=True, null=True)),
                ('scattering', models.FloatField(blank=True, null=True)),
                ('median_filter_kernel_size', models.IntegerField(blank=True, null=True)),
                ('convolution_kernel_size', models.IntegerField(blank=True, null=True)),
                ('xray_kv', models.IntegerField(blank=True, null=True)),
                ('xray_ua', models.IntegerField(blank=True, null=True)),
                ('filter_thickness_mm', models.IntegerField(blank=True, null=True)),
                ('filter_material', models.CharField(blank=True, db_index=True, max_length=255, null=True)),
                ('shuttling', models.BooleanField(blank=True, null=True)),
                ('dicom', models.TextField(blank=True, null=True)),
                ('exposure', models.IntegerField(blank=True, null=True)),
                ('accumulation', models.IntegerField(blank=True, null=True)),
                ('binning', models.IntegerField(blank=True, null=True)),
                ('gain', models.IntegerField(blank=True, null=True)),
                ('brightness', models.IntegerField(blank=True, null=True)),
                ('digital_gain', models.IntegerField(blank=True, null=True)),
                ('white_to_black_latency', models.IntegerField(blank=True, null=True)),
                ('black_to_white_latency', models.IntegerField(blank=True, null=True)),
                ('white_to_white_latency', models.IntegerField(blank=True, null=True)),
                ('lines', models.IntegerField(blank=True, null=True)),
                ('muvis_bug', models.ForeignKey(blank=True, help_text='The Muvis Bug relating to the scan', null=True, on_delete=django.db.models.deletion.PROTECT, to='muvis.MuvisBug')),
                ('sample', models.ForeignKey(blank=True, help_text='The sample that this scan relates to', null=True, on_delete=django.db.models.deletion.PROTECT, to='samples.Sample')),
                ('scanner', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='scans.Machine')),
            ],
            options={
                'abstract': False,
            },
        ),
    ]
